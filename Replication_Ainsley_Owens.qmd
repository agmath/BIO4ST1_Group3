---
title: "Starter Notebook"
author: Ainsley Owens
format: html
execute:
  keep-md: true
---

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

```

### Challenge 1

Here I am using the `c()` function to put four nucleotides (A, G, C, T) into a list.

```{r}
Nucleotides <-c ("A","G","C","T")
Nucleotides
```

### Challenge 2

Now, I will create a random string of 15 nucleotides, titled randGenome.

```{r}
genome <- 15
randGenome <- sample(Nucleotides, size= genome, replace= TRUE)
randGenome

```

Now, I will `collapse()` the genome to create a single string and make it easier to read.

```{r}
paste (randGenome, collapse="")
```

### Challenge 3

Now, I will create a random genome that is 1500 nucleotides long. I used the `paste()` function to collapse the list into a single string.

```{r}
genome <- 1500
randGenome <- sample(Nucleotides, size= genome, replace= TRUE)
paste (randGenome, collapse="")
```

Here, I am using `set.seed(215)` to initialize the random number generation with the seed 215, using the `paste()` function to collapse the list into one string.

```{r}
set.seed(215)
genomeLength <- 1500

randGenome <- sample(Nucleotides, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome
```

### Challenge 4

Using `set.seed(215)`, I created a random genome composed of 100 nucleotides. The `paste()` function collapsed the list into one single strand.

```{r}
set.seed(215)
genomeLength <- 100
randGenome <- sample(Nucleotides, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome

```

### Challenge 5

Here, I am learning how to create a for loop so I can create for loops to analyze genomes.

```{r}
myProduct <- 0

for(j in 1:15){
  myProduct <- myProduct + j
  print(myProduct)
}
```

### Challenge 6

Here, I created a random genome consisting of 10 nucleotides. I then created a for loop intended to print each individual nucleotide as opposed to the whole string. I used `1:nchar()` to run the for loop through all characters in the string. I used the `str_sub()` function to extract individual nucleotides. By using `str_sub()` and using `j` as both the start and end for subsetting, I was able to have the for loop print the individual nucleotides.

```{r}
set.seed(215)
genomeLength <- 10
randGenome <- sample(Nucleotides, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome

for(j in 1:nchar(randGenome)){
  print (str_sub(randGenome,start= j, end=j))
         }
```

### Challenge 7

```{r}
adenineCount <- 0
for(i in 1:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    (str_sub(randGenome, start = i, end = i))
   }
}

```
