---
title: "Group 3 project"
author: "Saran Ousseini"
format: html
execute:
  keep-md: true
---

# First, we will load our tidyverse

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

#
randGenome <- function(k){
  nucleotide <- c("A", "C", "T","G")
  rand_genome <- sample(nucleotide, size = k, replace = TRUE)

  rand_genome <- paste(rand_genome, collapse = "")
  rand_genome 

  return(rand_genome)
}

```

## Challenge 1: In this challenge we will create a list of the four nucleotides A, C, G, and T, using the c() function

```{r}

nucleotide <- c("A", "C", "T", "G")

nucleotide
```

## Challenge 2: We used the code from challenge 1 to create randgenom string of 15 nucleotides. We called the string "randGenoome"

```{r}
numNucleotide <- 15

rand_genome <- sample(nucleotide, size = numNucleotide, replace = TRUE)

rand_genome
```

```{r}
rand_genome <- paste(nucleotide, collapse = "")
rand_genome
```

## Challenge 3: In this challenge, we generated a random genome of 1500 nucleotides long and use the paste() method to collapse it from a list down to a single string. Then printed randGenome to the notebook.

```{r}
set.seed(200)
genomeLength <- 1500

rand_genome <- sample(nucleotide, size = genomeLength, replace = TRUE)

rand_genome <- paste(rand_genome, collapse = "")
rand_genome 
```

## Challenge 4:

In this challenge we set a seed using set.seed(215), then generate a random genome called randGenome, which is made of 100 nucleotide, then we collopased down a single string. We then counted the frequency of Adenine A

```{r}
set.seed(215)
genomeLength <- 100

rand_genome <- sample(nucleotide, size = genomeLength, replace = TRUE)

rand_genome <- paste(rand_genome, collapse = "")
rand_genome 
```

Result: I counted 23 Adenine (A)

```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```

## Challenge 5:

In this challenge, we initialized a variable called myProduct, and gave it a value of 1. We wrote our own loop, using j (an iterator).

```{r}
myProduct <- 1

for (j in 1:15) {
 myProduct <- myProduct + j
 print(myProduct)
}
```

## Challenge 6:

In this challenge we generated a random genome susbstring consisting of 10 nucleotides and used the past() methode, to collapse our genome to a string instead of a list.

```{r}
nucleotides <- c("A", "C", "G", "T")
genomeLength <- 10

rand_genome <- paste(sample(nucleotides, size = genomeLength, replace = TRUE),
                   collapse = "")
print(rand_genome)
```

## Challenge 7: Adapt the for loop provided above so that it counts the number of occurrences of Adenine (A) in randGenome.

```{r}
for(i in 0:nchar(rand_genome)){
  if(str_sub(rand_genome, start = i, end = i) == "A"){
    print(str_sub(rand_genome, start = i, end = i))
  }
}
```

## Challenge 8:

Here we will adapt a loop we created to count frequencies of all of the nucleotides in the genome string

```{r}
CountA <- 0
CountT <- 0
CountC <- 0
CountG <- 0

my_genome<- randGenome(1000)

for(i in 0:nchar(my_genome)){
  if(str_sub(my_genome, start = i, end = i) == "A"){
    CountA <- CountA + 1}
  
  if(str_sub(my_genome, start = i, end = i) == "T"){
    CountT <- CountT + 1}
  if(str_sub(my_genome, start = i, end = i) == "C"){
   CountC <- CountC + 1}
  if(str_sub(my_genome, start = i, end = i) == "G"){
    CountG <- CountG + 1}  
}
print(c(CountA, CountT, CountC, CountG))
```

## Challenge 9: We used the code from Challenge 8 to count the frequency of each nucleotide in the*Vibrio Cholerae* chromosome.

```{r}
vib_c <- scan("/Users/saranousseini/Desktop/VibrioCholerae.txt", what = "character", sep = NULL)

#vib_c
```

```{r}
CountA <- 0
CountT <- 0
CountC <- 0
CountG <- 0

for(i in 0:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    CountA <- CountA + 1}
  
  if(str_sub(vib_c, start = i, end = i) == "T"){
    CountT <- CountT + 1}
  if(str_sub(vib_c, start = i, end = i) == "C"){
   CountC <- CountC + 1}
  if(str_sub(vib_c, start = i, end = i) == "G"){
    CountG <- CountG + 1}  
}
print(c(CountA, CountT, CountC, CountG))

```

## Challenge 10: Create A Rosalinda account

## Populate genome given in the Rosalind Challenge

```{r}
genome <- c("CAAACACCAATTGTCTCTTACGAACCGAATTATTTCGTATCAGTTTGGGGCGCGATTACACATGAAGCTTTGTGGAACCTCCGCGTCCAAACGTCAATGTGAAATCCTCAGGGGAGTTAAAACCCCTGACCACGCGGGTCGAGCTCACGTCTTCTGAGGCCCGACTGGTAGGGTCGAAACTTTTAGTAAAACCTACGGTGAATTGACATATTCGTGAGTGAAGTCTACGTAAATTGCTATTCCGTCTGAGCTTTACGATTGTTGAAACTTCAATTTACATTTTAAAATGCATGCAGGTGAGCAGAAGGACATGTATTACGGATGGCACTGATATAACCTTGGTTTCGTGCTCGTTTAAGGCTCATCCATCCTATATTGGTCTATCGGGTCTTCGCTTGATTACAGCTCTTACCTTTTTGAGCCAGCCGGGAAGTAGTTAGATATCGGCCCGACTTAGTTCGAATCTGTGCCCCCGAAGCATGTTACAAATCTGCCCCAGTGTACTACGACAGTATCCGTCAACCTCTGTAGATCCGCTAGATACAATGGGGGATGGAGCCTGGAAATTGGCCCGTAGGGAGGCTTCGTGTGGGTGCACCAATTGCATAGATGTACCAATTCTTGGTATCGCTTAGTTGACCTTGGGCAAAGGACAAGTTACCCATTTATGACGGTGGATGCAGAATAGTAATCAGGCGCAGGCTCATCGAGGACAGGTCTATATCCGTGGGGATAGCTTCATGCGAGGAATTTCAGGTCCGCGCATTATATATTGCGCTTCTACCCGAAGGCGGCTCTTAACTACATTCCGTGCGTGAATAAACCACAGGCAGGCCGCATGTTAC")
```

## Solve problem from Rosalind Challenge

```{r}
CountA <- 0
CountT <- 0
CountC <- 0
CountG <- 0

for(i in 0:nchar(genome)){
  if(str_sub(genome, start = i, end = i) == "A"){
    CountA <- CountA + 1}
  
  if(str_sub(genome, start = i, end = i) == "T"){
    CountT <- CountT + 1}
  if(str_sub(genome, start = i, end = i) == "C"){
   CountC <- CountC + 1}
  if(str_sub(genome, start = i, end = i) == "G"){
    CountG <- CountG + 1}  
}
print(c(CountA, CountC, CountG, CountT))

```

After adding my answer into Rosalind, I was successful in the Rosalind Challenge

# Replication0rigin_PartI

```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```

## Challenge 1: In this challenge we will use sample () function in conjunction with the paste (..., collapse ="") to generate a random genome the of at least 2000 .

## Then we used the nucleotide_frequency() function to count the frequency of Cytosine in the random genome you constructed.

```{r}
nucleotide <- c("A", "C", "T", "G")

nucleotide
set.seed(200)
genomeLength <- 2000

randGenome <- sample(nucleotide, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome 


nucleotide_frequency(randGenome, "C")
```

## Challenge 2:

In this challenge, we will be build a function called rand_genome, which will take a single paramter k, then denote number of nucleotide in the genome that will be generated. When this is done, our function may return a single genome string of length called k

```{r}
randGenome <- function(k){
  nucleotide <- c("A", "C", "T","G")
  rand_genome <- sample(nucleotide, size = k, replace = TRUE)

  rand_genome <- paste(rand_genome, collapse = "")
  rand_genome 

  return(rand_genome)
}

randgenome <- randGenome(5)
randgenome
```

```{r}
#myString <- randGenome

str_sub(randGenome(5), start = 1, end = 2)
```

```{r}
generate_2_mers <- function(myString) {
  list_2_mers <- c()

  for(i in 1:(nchar(myString) - 1)){
  list_2_mers <- list_2_mers %>%
  append(str_sub(myString, start = i, end = i + 1))
    }
  return(list_2_mers)
}

generate_2_mers(randGenome(10))
```

## Challenge 3:

The goal of this challenge is to build a function called generate_3\_mers(), which will generate all of the susbtring of 3 nucleotides, this nucleotides will be name 3-mers in the genome string. The function will accept a single genomeString, and return a lost which contains 3_mers. After this is done, we will use rand_genome() function to build a random genome

```{r}
generate_3_mers <- function(myString) {
  list_3_mers <- c()

  for(i in 1:(nchar(myString) - 1)){
  list_3_mers <- list_3_mers %>%
  append(str_sub(myString, start = i, end = i + 2))
    }
  return(list_3_mers)
}

generate_3_mers(randGenome(10))
```

## Challenge 4:

In this challenge, we will be creating another generate_3\_mers() function, which will generate k-mers of our desired length.

```{r}
generate_k_mers <- function(geneomeString, k=3) {
  list_codon <- c()
  for (i in seq(1, nchar(geneomeString) - k +1, by = k)) { 
    list_codon <- list_codon %>%
      append(str_sub(geneomeString, start = i, end = i + k -1))
  }
return(list_codon)
}
generate_k_mers(randGenome(9))
```

```{r}
count_pattern <- function(myString, pattern){
  count <- 0
  for(i in 1:nchar(myString)){
    if(str_sub(myString, start = i, end = i+1) == pattern){
      count = count + 1
    }
  }
  return(count)
}

myString <- c("OUSSEINI")

count_pattern(myString, "OU")
```

## Challenge 5:

Here, we will write a new function known as count_pattern() withing another larger genomeString. This function should take genomstring and the patter we want to count. The function should give back the count of occurrences of patter within genomeString

```{r}
nt_patterns <- function(string, pattern) {
  nt_matches <- 0
  
  for (i in seq(1, nchar(string))){
    if(str_sub(string, i, i + str_length(pattern)-1) == pattern){
      nt_matches = nt_matches + 1
  }
  }
  return(nt_matches)
}
nt_patterns(randGenome(2000), "AGG")
```

# Part II:

## Challenge 1: Here, we will find the most frequent words in a string

```{r}
generate_k_mers <- function(geneomeString, k=3) {
  list_codon <- c()
  for (i in seq(1, nchar(geneomeString) - k +1, by = k)) { 
    list_codon <- list_codon %>%
      append(str_sub(geneomeString, start = i, end = i + k -1))
  }
return(list_codon)
}
generate_k_mers("ACACAGACATCCCACCCC")
```

```{r}
find_frequent_kmers <- function(genome, k){
  kmers <- generate_k_mers(genome,k)
  kmers <- unique(kmers)
  kmer_count <- rep(0, length(kmers))
  for (i in 1 : length(kmers)) {
    count_pattern(genome, kmers[i])
    max_count <- max(kmer_count)
    frequent_kmers <- kmers[kmer_count == max_count]
    
  }
  return(frequent_kmers)
}
find_frequent_kmers("ACACAGACATCCCACCCC", k = 3)
```

```{r}
find_frequent_kmers <- function(genome, k){
  kmers <- generate_k_mers(genome,k)
  kmers <- unique(kmers)
  kmer_count <- rep(0, length(kmers))
  for (i in 1 : length(kmers)) {
    count_pattern(genome, kmers[i])
    max_count <- max(kmer_count)
    frequent_kmers <- kmers[kmer_count == max_count]
    
  }
  return(frequent_kmers)
}
find_frequent_kmers("ACGTTGCATGTCGCATGATGCATGAGAGCT", k = 4)
```

## Challenge 2:

## The Reverse-Complement Problem

```{r}
reverse_complement <- function(substring) {
  substring_list <- str_split(substring, "") [[1]]
  rev_substring <- rev(substring_list)
  reverse_complement <- c()
  for(i in 1:length(rev_substring)) {
    if(rev_substring[i] == "A"){
      reverse_complement <- append(reverse_complement, "T")
    }
    if (rev_substring[i] == "T"){
      reverse_complement <- append(reverse_complement, "A")
    }
    if(rev_substring[i] == "C"){
      reverse_complement <- append(reverse_complement, "G")
    }
    if(rev_substring[i] == "G") {
      reverse_complement <- append(reverse_complement, "C")
    }
  }
  
  reverse_complement <- paste(reverse_complement, collapse = "")
return(reverse_complement)
}
reverse_complement("ACACAGACATCCCACCCC")
```

```{r}
reverse_complement <- function(substring) {
  substring_list <- str_split(substring, "") [[1]]
  rev_substring <- rev(substring_list)
  reverse_complement <- c()
  for(i in 1:length(rev_substring)) {
    if(rev_substring[i] == "A"){
      reverse_complement <- append(reverse_complement, "T")
    }
    if (rev_substring[i] == "T"){
      reverse_complement <- append(reverse_complement, "A")
    }
    if(rev_substring[i] == "C"){
      reverse_complement <- append(reverse_complement, "G")
    }
    if(rev_substring[i] == "G") {
      reverse_complement <- append(reverse_complement, "C")
    }
  }
  
  reverse_complement <- paste(reverse_complement, collapse = "")
return(reverse_complement)
}
reverse_complement("ACGTTGCATGTCGCATGATGCATGAGAGCT")
```

In part 2: we were searched frequent genome k-mers, as well as its reverse complements.

# Part III: Finding the Replication Origin

## Challenge 1 goals:

1.  Work through an initial window to find frequent k_mers meeting our threshold (t)
2.  Slide the window through the genome, update counts and add frequent k-mers to candidate list

Notes: Windown size L= 5, k=2, t=2

```{r}
initialize_k_mer_dict <- function(k){
  nucleotides <- c("A", "C", "G", "T")

  k_mers_dict <- expand.grid(rep(list(nucleotides), k)) %>%
    unite("k_mers", everything(), remove = TRUE, sep = "") %>%
    unique() %>%
    mutate(count = 0)
  
  return(k_mers_dict)
}

k_mers_dict <- initialize_k_mer_dict(9)
k_mers_dict 
```

The second code block we will generate the clump_finding function, which will generate clump_finding functions

```{r}
clump_finding <- function(genome, L, t , k ) {
  kmer_dict <- initialize_k_mer_dict(k)
  ng <- nchar (genome)
  
  initial_window <-  str_sub(genome, 1, L)
  for (i in 1: L-(k + 1)) {
    curr_kmer <- str_sub(initial_window, i, i + (k - 1))
    curr_count <- count_pattern(initial_window, curr_kmer)
    curr_row <- which(my_kmer_dict$kmers == curr_kmer)
    kmer_dict$count[curr_row] <- curr_count
  }
  candidates <- my_kmer_dict %>%
    filter(count >= t) %>%
    pull(k_mers)
  
    for (j  in 2:(ng - (l-2))) {
      rem_pattern <- str_sub(genome, j - 1, j - 1 + (k-1))
      add_pattern <- str_sub(genome, j +(L-2) - (k-1), j + (L - 2))
      
      rem_row <- which(kmer_dict$k_mers == rem_pattern)
      add_row <- which(kmers_dict$k_mers == add_pattern)
      
      kmer_dict$count[rem_row] <- kmer_dict$count[rem_row] - 1
      kmer_dict$count[add_row] <- kmer_dict$count[add_row] + 1
      
      if( kmer_dcit$count[add_row] >= t){
        candidates <- append(candidates, add_pattern)
        candidates <- unique(candidates)
      }
    }
  return(candidates)
}


```

## Challenge 2: Find all 9-mers corresponding to (500, 3)-clumps in the E. Coli genome

Adding functionality, or optimize the code

I did not run this on the e.coli function, but it was confirmed that it works after it was run by our professor

```{r}

clump_finding <- function(genome, L, t , k ) {
  kmer_dict <- initialize_k_mer_dict(k)
  ng <- nchar (genome)
  
  initial_window <-  str_sub(genome, 1, L)
  for (i in 1: L-(k + 1)) {
    curr_kmer <- str_sub(initial_window, i, i + (k - 1))
    curr_count <- count_pattern(initial_window, curr_kmer)
    curr_row <- which(my_kmer_dict$kmers == curr_kmer)
    kmer_dict$count[curr_row] <- curr_count
  }
  candidates <- my_kmer_dict %>%
    filter(count >= t) %>%
    pull(k_mers)
  
    for (j  in 2:(ng - (l-2))) {
      rem_pattern <- str_sub(genome, j - 1, j - 1 + (k-1))
      add_pattern <- str_sub(genome, j +(L-2) - (k-1), j + (L - 2))
      
      rem_row <- which(kmer_dict$k_mers == rem_pattern)
      add_row <- which(kmers_dict$k_mers == add_pattern)
      
      kmer_dict$count[rem_row] <- kmer_dict$count[rem_row] - 1
      kmer_dict$count[add_row] <- kmer_dict$count[add_row] + 1
      
      if( kmer_dcit$count[add_row] >= t){
        candidates <- append(candidates, add_pattern)
        candidates <- unique(candidates)
      }
    }
  return(candidates)
}


```

## Summary:

Through out this notebook, we started by the introduction. In the introduction, we had 10 challenges. Through this 10 challenges, we were able to create list of nucleotide, we used function such as **sample()** which helped create random genome from the characters in the nucleotide list. We also use function **paste()** as well as **collapse = ""** to collapse the random genome into one string of nucleotide. In the introduction we learned how to use the function **set.seed()** which help set a seed of a random number generator, this made our result reproducible. We were also introduced to for loop to repeat set of simple instruction.

Next, we started Part I. Part 1 had 5 challenges, during this challenges, we learned to write reusable code using functions. In addition, we developed skills in working with genomes, such as identifying patterns of a specific length and counting their occurrences within a genome. These two tasks were important in identifying the Replication Origin. Following Part 1, we talked Part 2, which consisted of 2 challenges. This challenges gave us the capability to scan a genome and identify frequent "**near" k-mers,** as well as their reverse-complements, which can be defined as genetic substrings that serve as signals for DNA polymerase replication.

Lastly, we tackled Part III. The coding in this part was way harder compared to the introduction, Part 1, or Part 2. This part was like a combination of all the other codes we worked on, and function we created, to finally be able to create the functions **clump_finding()** .

# Challenge IV

```{r}
SKEW <- function(genome) {
  skew <- rep(0, length(genome)+1)  
  for (i in 1:length(genome)) 
    if (genome[i] == "G") 
      skew[i+1] <- skew[i] + 1
   (genome[i] == "C") 
      skew[i+1] <- skew[i] - 1
 
      skew[i+1] <- skew[i]
   
  
  return(skew)
}

```

Yes, My function works

Challenge 2

```{r}
SKEW_min <- function(genome) {
  skew <- SKEW(genome)  
  min_skew <- min(skew)  
  
   return(min_skew)
}

```

```{r}
SKEW_min <- function(genome) {
  skew <- SKEW(genome)  
  min_skew <- min(skew)  
  
  
  
  
  return(min_skew)
  
}

sample_genome <- "CCTATCGGTGGATTAGCATGTCCCTGTACGTTTCGCCGCGAACTAGTTCACACGGCTTGATGGCAAATGGTTTTTCCGGCGACCGTAATCGTCCACCGAG"
min_skew<- SKEW_min(sample_genome)
print(min_skew)


```

# 
