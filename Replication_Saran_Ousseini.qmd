---
title: "Group 3 project"
author: "Saran Ousseini"
format: html
execute:
  keep-md: true
---

```{r setup, include = FALSE}
#Load in any packages you need
library(tidyverse)

#Read in any data

```

## Challenge 1

```{r}

nucleotide <- c("A", "C", "T", "G")

nucleotide
```

```{r}
numNucleotide <- 15

randGenome <- sample(nucleotide, size = numNucleotide, replace = TRUE)

randGenome
```

Challenge 2

```{r}
paste(randGenome, collapse = "")
```

## Challenge 3

```{r}
set.seed(200)
genomeLength <- 1500

randGenome <- sample(nucleotide, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome 
```

## Challenge 4

```{r}
set.seed(215)
genomeLength <- 100

randGenome <- sample(nucleotide, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome 
```

I counted 23 Adenine (A)

```{r}
mySum <- 0

for(i in 1:10){
  mySum <- mySum + i
  print(mySum)
}
```

## Challenge 5

```{r}
myProduct <- 1

for (j in 1:15) {
 myProduct <- myProduct + j
 print(myProduct)
}
```

## Challenge 6:

```{r}
nucleotides <- c("A", "C", "G", "T")
genomeLength <- 10

randGenome <- paste(
  sample(nucleotides, size = genomeLength, replace = TRUE),
                   collapse = "")
print(randGenome)
```

## Challenge 7:Adapt the for loop provided above so that it counts the number of occurrences of Adenine (A) in randGenome.

```{r}
for(i in 0:nchar(randGenome)){
  if(str_sub(randGenome, start = i, end = i) == "A"){
    print(str_sub(randGenome, start = i, end = i))
  }
}
```

## Challenge 8: Adapt the loop you just created so that it will count the frequencies of each of the four individual nucleotides.

```{r}
vib_c <- scan("/Users/saranousseini/Desktop/VibrioCholerae.txt", what = "character", sep = NULL)

#vib_c
```

## Challenge 9: Use your code from Challenge 8 to count the frequency of each nucleotide in the*Vibrio Cholerae* chromosome.

```{r}
CountA <- 0
CountT <- 0
CountC <- 0
CountG <- 0

my_genome<- randGenome(1000)

for(i in 0:nchar(my_genome)){
  if(str_sub(my_genome, start = i, end = i) == "A"){
    CountA <- CountA + 1}
  
  if(str_sub(my_genome, start = i, end = i) == "T"){
    CountT <- CountT + 1}
  if(str_sub(my_genome, start = i, end = i) == "C"){
   CountC <- CountC + 1}
  if(str_sub(my_genome, start = i, end = i) == "G"){
    CountG <- CountG + 1}  
}
print(c(CountA, CountT, CountC, CountG))
```

## 

```{r}
CountA <- 0
CountT <- 0
CountC <- 0
CountG <- 0

for(i in 0:nchar(vib_c)){
  if(str_sub(vib_c, start = i, end = i) == "A"){
    CountA <- CountA + 1}
  
  if(str_sub(vib_c, start = i, end = i) == "T"){
    CountT <- CountT + 1}
  if(str_sub(vib_c, start = i, end = i) == "C"){
   CountC <- CountC + 1}
  if(str_sub(vib_c, start = i, end = i) == "G"){
    CountG <- CountG + 1}  
}
print(c(CountA, CountT, CountC, CountG))

```

## Challenge 10: Create A Rosalinda account

# Replication0rigin_PartI

```{r}
nucleotide_frequency <- function(genomeString, nucleotide = "A"){
  count <- 0
  for(i in 1:nchar(genomeString)){
    if(str_sub(genomeString, start = i, end = i) == nucleotide){
      count <- count + 1
    }
  }
  return(count)
}

nucleotide_frequency("ACTTGCGGGTATCGAG", "G")
```

## Challenge 1

```{r}
nucleotide <- c("A", "C", "T", "G")

nucleotide
set.seed(200)
genomeLength <- 2000

randGenome <- sample(nucleotide, size = genomeLength, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome 


nucleotide_frequency(randGenome, "C")
```

## Challenge 2

```{r}
randGenome <- function(k){
  nucleotide <- c("A", "C", "T","G")
randGenome <- sample(nucleotide, size = k, replace = TRUE)

randGenome <- paste(randGenome, collapse = "")
randGenome 

  return(randGenome)
}

randgenome <- randGenome(5)
randgenome
```

```{r}
myString <- randGenome

str_sub(randGenome(), start = 1, end = 2)
```

```{r}
generate_2_mers <- function(myString) {
  list_2_mers <- c()

  for(i in 1:(nchar(myString) - 1)){
  list_2_mers <- list_2_mers %>%
  append(str_sub(myString, start = i, end = i + 1))
    }
  return(list_2_mers)
}

generate_2_mers(randGenome())
```

## Challenge 3

```{r}
generate_3_mers <- function(myString) {
  list_3_mers <- c()

  for(i in 1:(nchar(myString) - 1)){
  list_3_mers <- list_3_mers %>%
  append(str_sub(myString, start = i, end = i + 2))
    }
  return(list_3_mers)
}

generate_3_mers(randGenome())
```

## Challenge 4

```{r}
generate_k_mers <- function(geneomeString, k=3) {
  list_codon <- c()
  for (i in seq(1, nchar(geneomeString) - k +1, by = k)) { 
    list_codon <- list_codon %>%
      append(str_sub(geneomeString, start = i, end = i + k -1))
  }
return(list_codon)
}
generate_k_mers(randGenome(9))
```

```{r}
count_pattern <- function(myString, pattern){
  count <- 0
  for(i in 1:nchar(myString)){
    if(str_sub(myString, start = i, end = i+1) == pattern){
      count = count + 1
    }
  }
  return(count)
}
  
count_pattern(myString, "be")
```

## Challenge 5

```{r}
nt_patterns <- function(string, pattern) {
  nt_matches <- 0
  
  for (i in seq(1, nchar(string))){
    if(str_sub(string, i, i + str_length(pattern)-1) == pattern){
      nt_matches = nt_matches + 1
  }
  }
  return(nt_matches)
}
nt_patterns(randGenome(2000), "AGG")
```

# Part II:

## Challenge 1: Find the most frequent words in a string

```{r}
generate_k_mers <- function(geneomeString, k=3) {
  list_codon <- c()
  for (i in seq(1, nchar(geneomeString) - k +1, by = k)) { 
    list_codon <- list_codon %>%
      append(str_sub(geneomeString, start = i, end = i + k -1))
  }
return(list_codon)
}
generate_k_mers("ACACAGACATCCCACCCC")
```

```{r}
find_frequent_kmers <- function(genome, k){
  kmers <- generate_k_mers(genome,k)
  kmers <- unique(kmers)
  kmer_count <- rep(0, length(kmers))
  for (i in 1 : length(kmers)) {
    count_pattern(genome, kmers[i])
    max_count <- max(kmer_count)
    frequent_kmers <- kmers[kmer_count == max_count]
    
  }
  return(frequent_kmers)
}
find_frequent_kmers("ACACAGACATCCCACCCC", k = 3)
```

```{r}
find_frequent_kmers <- function(genome, k){
  kmers <- generate_k_mers(genome,k)
  kmers <- unique(kmers)
  kmer_count <- rep(0, length(kmers))
  for (i in 1 : length(kmers)) {
    count_pattern(genome, kmers[i])
    max_count <- max(kmer_count)
    frequent_kmers <- kmers[kmer_count == max_count]
    
  }
  return(frequent_kmers)
}
find_frequent_kmers("ACGTTGCATGTCGCATGATGCATGAGAGCT", k = 4)
```

## Challenge 2: The Reverse-Complement Problem

```{r}
reverse_complement <- function(substring) {
  substring_list <- str_split(substring, "") [[1]]
  rev_substring <- rev(substring_list)
  reverse_complement <- c()
  for(i in 1:length(rev_substring)) {
    if(rev_substring[i] == "A"){
      reverse_complement <- append(reverse_complement, "T")
    }
    if (rev_substring[i] == "T"){
      reverse_complement <- append(reverse_complement, "A")
    }
    if(rev_substring[i] == "C"){
      reverse_complement <- append(reverse_complement, "G")
    }
    if(rev_substring[i] == "G") {
      reverse_complement <- append(reverse_complement, "C")
    }
  }
  
  reverse_complement <- paste(reverse_complement, collapse = "")
return(reverse_complement)
}
reverse_complement("ACACAGACATCCCACCCC")
```

```{r}
reverse_complement <- function(substring) {
  substring_list <- str_split(substring, "") [[1]]
  rev_substring <- rev(substring_list)
  reverse_complement <- c()
  for(i in 1:length(rev_substring)) {
    if(rev_substring[i] == "A"){
      reverse_complement <- append(reverse_complement, "T")
    }
    if (rev_substring[i] == "T"){
      reverse_complement <- append(reverse_complement, "A")
    }
    if(rev_substring[i] == "C"){
      reverse_complement <- append(reverse_complement, "G")
    }
    if(rev_substring[i] == "G") {
      reverse_complement <- append(reverse_complement, "C")
    }
  }
  
  reverse_complement <- paste(reverse_complement, collapse = "")
return(reverse_complement)
}
reverse_complement("ACGTTGCATGTCGCATGATGCATGAGAGCT")
```
